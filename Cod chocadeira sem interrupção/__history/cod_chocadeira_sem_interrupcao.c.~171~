
#INCLUDE<18F4550.h>//   Inclui a biblioteca resposável por estabelecer os parametros do pic utilizado no projeto
#DEVICE ADC =10  // seleciona o conversor a/d com 10 bits
#INCLUDE <stdlib.h>  
#INCLUDE <math.h> //  Inclui a biblioteca responsavel por fornecer funções de calculos matematicos 

#fuses HS,NOWDT,PUT,NOBROWNOUT,NOLVP   // configuração dos fuses do pic 

#use   delay(clock=40000000)// Informa a função delay, o clock utilizado
#BIT Data_Pin = 0x06.7                       // Pin mapped to PORTB.7
#BIT Data_Pin_Direction = 0x86.7             // Pin direction mapped to TRISB.7
#use   fast_io(a)//modo rápido de inicialização das portas
#use   fast_io(b)//modo rápido de inicialização das portas
#use   fast_io(d)//modo rápido de inicialização das portas
#use   fast_io(e)//modo rápido de inicialização das portas

#byte   porta = 0xf80 // atribui o nome "porta" ao registrador do port 0xf80
#byte   portb = 0xf81 
#byte   portd = 0xf83
#byte   porte = 0xf84
#byte   portc = 0xf82
// pinos de entrada e saida 
#bit NTC = porta.0    //  Pino de leitura do NTC 
#bit PIN_COOLER = portc.0  //  Pino de leitura do DHT11
#bit POT_SET_TEMP = porta.1 //Pino de leitura do potenciometro de set da temperatura 
#bit POT_SET_UMI = porta.2 //Pino de leitura do potenciometro de set da umidade 
#bit BOT_BLK_LTH = portb.0 // Pino do botao paraligar a luz do lcd
#bit BOT_MORE_INF = portb.1 // botao para mais informaçoes no lcd
// pinos de saida

#bit RELE_LAMP = portb.2  //  pino que acionamento do relé da lampada/aquecedor
#bit PIN_IN1_MOTPAS = portb.3 //  pino de controle do motor de paso via modulo 
#bit PIN_IN2_MOTPAS = portb.4 //  pino de controle do motor de paso via modulo 
#bit PIN_IN3_MOTPAS = portb.5 //  pino de controle do motor de paso via modulo 
#bit PIN_IN4_MOTPAS = portb.6 //  pino de controle do motor de paso via modulo 
#bit DHT11 = portb.7 // Pino de acionamento do cooler via transistor 
#bit rs =porte.0 //  via do lcd que sinaliza recepção de dados ou comando 
#bit enable = porte.1 // habilita o lcd
#byte DISPLAY = portd //  seleciona o port no qual o lcd esta ligado ( o mesmo valor que esta no arquivo.h)
#INCLUDE <lcd.h> // inclui a biblioteca do modulo lcd


char message2[] = "RH   = 00.0 %"; //  vetor de mensagem para a umidade 
short Time_out; //  variavel para as funçoes referentes ao sensor de umidade dht11
unsigned  int8 RH_byte1, RH_byte2, CheckSum; //  variaveis para as funçoes do dht11

float ntc_val = 0; // variavel responsavel por receber o valor digital do ntc
float rntc = 0; //  valor da resistencia do divisor de tensao do ntc 
float b1=0;  //  variavel auxiliar para função do ntc
float c1=0;//  variavel auxiliar para função do ntc
float temp=0;//  variavel auxiliar para função do ntc
float temperatura=0;//  variavel auxiliar para função do ntc
char umidade;//  variavel auxiliar para função do ntc
const float a = 0.0011303; //  constantes fisicas do sensor ntc 10k
const float b = 0.0002339; //  constantes fisicas do sensor ntc 10k
const double c = 0.00000008863; //  constantes fisicas do sensor ntc 10k



// FUNÇÃO POR INICIAR A DHT11

void start_signal(){
  Data_Pin_Direction = 0;              // Configure connection pin as output
  Data_Pin = 0;                        // Connection pin output low
  delay_ms(25);
  Data_Pin = 1;                        // Connection pin output high
  delay_us(30);
  Data_Pin_Direction = 1;              // Configure connection pin as input
}

// FUNÇAÕ POR VERIFICAR SE O SENSOR ESTA RESPONDENDO 

  short check_response(){
  delay_us(40);
  if(!Data_Pin){                     // Read and test if connection pin is low
    delay_us(80);
    if(Data_Pin){                    // Read and test if connection pin is high
      delay_us(50);
      return 1;}
    }
}


// FUNÇÃO PARA A OBTENÇÃO DO VALOR DE HUMIDADE
unsigned int8 Read_Data(){
  unsigned int8 i, k, _data = 0;     // k is used to count 1 bit reading duration
  if(Time_out)
    break;
  for(i = 0; i < 8; i++){
    k = 0;
    while(!Data_Pin){                          // Wait until pin goes high
      k++;
      if (k > 100) {Time_out = 1; break;}
      delay_us(1);}
    delay_us(30);
    if(!Data_Pin)
      bit_clear(_data, (7 - i));               // Clear bit (7 - i)
    else{
      bit_set(_data, (7 - i));                 // Set bit (7 - i)
      while(Data_Pin){                         // Wait until pin goes low
      k++;
      if (k > 100) {Time_out = 1; break;}
      delay_us(1);}
    }
  }
  return _data;
}

// FUNÇÃO PRINCIPAL QUE RETORNARA A UMIDADE 

char dht11(){
   delay_ms(1000);
   Time_out = 0;
   Start_signal();
   if(check_response()){// If there is response from sensor
   RH_byte1=Read_Data();// read RH byte1
   RH_byte2=Read_Data();// read RH byte2
   Checksum=Read_Data();// read checksum                   
      if(CheckSum==((RH_Byte1+RH_Byte2)& 0xFF)){
      message2[7]=RH_Byte1/10+48;
             message2[8]= RH_Byte1%10+48;
             message2[10] = RH_Byte2/10+48;                            
       }
   } 
   return message2;
}




float ntc(){
set_adc_channel(0); //  escolhe o pino analogico para ler  
delay_us(10); // delay para começar a conversão 
ntc_val = read_adc(); // le o valor na porta analogica
ntc_val *=5; // multiplica o valor digitalizado pelo valor de tensão de alimentação
ntc_val/=1023;  // divide  o valor acima por 1023
// Inicio calculo de equação de  Steinhart & Hart 
rntc=33000/ntc_val;     
       rntc=rntc-10000;      
       b1=log(rntc);          
       b1=b1*b;               
       c1=log(rntc);          
       c1=pow(c1,3);          
       c1=c1*c;               
       temp=a+b1+c1;          
       temp=1/temp;           
       temp=temp-273.15;
       return temp;
// Fim do calculo de equação de  Steinhart & Hart
}


int tratamento_de_bouncing() {




//  Aqui será implementada uma função para o tratamento de bouncing de todos os botoes da aplicação 






}


void aciona_stepper_motor() {


// Aqui será implementada a função responsavel por acionar o stepper motor 


}





void main (void){

setup_adc(ADC_CLOCK_INTERNAL); //  configura o clock utilizado para o conversor ad e o pior clock ele usa a malha RC é lenta 
setup_adc_ports( AN0_TO_AN2 ); // selecionaos pinos A0 a A2 como pinos de sinais analogicos 
set_tris_a(0b00001111); // verificar se pinos analogicos necessitam de definição de tris
set_tris_b(0b11000000);  
set_tris_c(0b00000000);// define os pinos RB0 E RB1 como entrada e os demais como saida
set_tris_d(0b00000000);  //  Idem como supracitado acima 
set_tris_e(0b00000100);
inicializa_lcd(); // função responsavel por inicializar o modulo lcd
  while(true){
  
  temperatura = ntc(); //  le o valor  de temperatura em graus celsius que a função do ntc retorna 
  umidade = dht11();
  comando_lcd(0x83); //  posiciona o cursor no endereço 0x83
  printf(escreve_lcd,"%d\n", temperatura);
    // implementação da rotina de controle de  temperatura 
    if(temperatura<=38){   //  verifica se da temperatura de menor que 38 graus e faz  a rotina 
     PIN_COOLER =0 ;
     RELE_LAMP = 1 ;
    }
    if(temperatura>38){
    PIN_COOLER =1 ;
    RELE_LAMP = 0 ; 
    }
    //delay_ms(2000);   
  }
  
  


































}
